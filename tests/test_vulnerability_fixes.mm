#include <iostream>
#include <vector>
#include <cassert>
#include <chrono>
#include "../src/host/transformer_model.h"

// Test configuration with known safe parameters
TransformerConfig createSafeTestConfig() {
    TransformerConfig config;
    config.vocab_size = 1776;
    config.embedding_dim = 512;       // Safe for threadgroup arrays (< 1024)
    config.num_layers = 6;
    config.num_heads = 8;
    config.ffn_hidden_dim = 2048;     // Now safe with fixed threadgroup arrays
    config.max_sequence_length = 512; // Safe for stack arrays (< 1024)
    config.batch_size = 4;            // Small for testing
    config.learning_rate = 1e-4f;
    config.use_half_precision = true;
    config.float_logits = true;
    return config;
}

// Test configuration with parameters at the edge of safety limits
TransformerConfig createEdgeCaseTestConfig() {
    TransformerConfig config;
    config.vocab_size = 1776;
    config.embedding_dim = 1024;      // At the edge of layer_norm threadgroup arrays
    config.num_layers = 2;            // Fewer layers for faster testing
    config.num_heads = 8;
    config.ffn_hidden_dim = 2048;     // At the edge of ffn_backward fixed limit
    config.max_sequence_length = 1024; // At the edge of stack arrays
    config.batch_size = 2;            // Small for testing
    config.learning_rate = 1e-4f;
    config.use_half_precision = true;
    config.float_logits = true;
    return config;
}

bool testVulnerabilityFixes() {
    std::cout << "🔬 VULNERABILITY FIXES TEST: Starting comprehensive safety verification..." << std::endl;
    
    // Test 1: Safe configuration should work without issues
    std::cout << "\n📋 Test 1: Safe Configuration" << std::endl;
    {
        TransformerConfig safe_config = createSafeTestConfig();
        TransformerModel model(safe_config);
        
        if (!model.initialize()) {
            std::cerr << "❌ Failed to initialize model with safe configuration" << std::endl;
            return false;
        }
        
        // Test a single training step to verify no crashes
        std::vector<uint32_t> input_tokens = {1, 2, 3, 4, 5, 6, 7, 8};
        std::vector<uint32_t> target_tokens = {2, 3, 4, 5, 6, 7, 8, 9};
        
        float loss = 0.0f;
        bool success = model.trainStep(input_tokens, target_tokens, loss);
        
        if (!success) {
            std::cerr << "❌ Training step failed with safe configuration" << std::endl;
            return false;
        }
        
        std::cout << "✅ Safe configuration works correctly (loss: " << loss << ")" << std::endl;
    }
    
    // Test 2: Verify diagnostic system catches problematic configurations
    std::cout << "\n📋 Test 2: Diagnostic System Validation" << std::endl;
    {
        TransformerConfig config = createSafeTestConfig();
        config.embedding_dim = 0; // This should trigger division by zero checks
        
        TransformerModel model(config);
        if (model.initialize()) {
            std::cerr << "❌ Model should have failed to initialize with embedding_dim = 0" << std::endl;
            return false;
        }
        
        std::cout << "✅ Diagnostic system correctly rejects invalid configuration" << std::endl;
    }
    
    // Test 3: Verify edge case configurations work within safety limits
    std::cout << "\n📋 Test 3: Edge Case Configuration (At Safety Limits)" << std::endl;
    {
        TransformerConfig edge_config = createEdgeCaseTestConfig();
        
        // These parameters are at the edge of our safety limits
        std::cout << "  Testing with:" << std::endl;
        std::cout << "    embedding_dim: " << edge_config.embedding_dim << " (at layer_norm threadgroup limit)" << std::endl;
        std::cout << "    ffn_hidden_dim: " << edge_config.ffn_hidden_dim << " (at ffn_backward fixed limit)" << std::endl;
        std::cout << "    max_sequence_length: " << edge_config.max_sequence_length << " (at edge of stack arrays)" << std::endl;
        
        TransformerModel model(edge_config);
        
        if (!model.initialize()) {
            std::cerr << "❌ Failed to initialize model with edge case configuration" << std::endl;
            return false;
        }
        
        // Test a minimal training step
        std::vector<uint32_t> input_tokens = {1, 2, 3, 4};
        std::vector<uint32_t> target_tokens = {2, 3, 4, 5};
        
        float loss = 0.0f;
        bool success = model.trainStep(input_tokens, target_tokens, loss);
        
        if (!success) {
            std::cerr << "❌ Training step failed with edge case configuration" << std::endl;
            return false;
        }
        
        std::cout << "✅ Edge case configuration works safely within limits (loss: " << loss << ")" << std::endl;
    }
    
    // Test 4: Verify diagnostic mode functionality
    std::cout << "\n📋 Test 4: Diagnostic Mode Functionality" << std::endl;
    {
        TransformerConfig config = createSafeTestConfig();
        config.batch_size = 12; // Set to trigger diagnostic at sequence 11 (12th sequence)
        
        TransformerModel model(config);
        
        if (!model.initialize()) {
            std::cerr << "❌ Failed to initialize model for diagnostic mode test" << std::endl;
            return false;
        }
        
        // Create a batch with exactly 12 sequences to trigger diagnostic mode
        std::vector<std::vector<uint32_t>> input_batch;
        std::vector<std::vector<uint32_t>> target_batch;
        
        for (int i = 0; i < 12; i++) {
            input_batch.push_back({1, 2, 3, 4});
            target_batch.push_back({2, 3, 4, 5});
        }
        
        std::cout << "  Testing diagnostic mode with 12 sequences..." << std::endl;
        auto start_time = std::chrono::high_resolution_clock::now();
        
        float avg_loss = 0.0f;
        bool success = model.trainBatch(input_batch, target_batch, avg_loss);
        
        auto end_time = std::chrono::high_resolution_clock::now();
        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count();
        
        if (!success) {
            std::cerr << "❌ Batch training failed during diagnostic mode test" << std::endl;
            return false;
        }
        
        std::cout << "✅ Diagnostic mode completed successfully" << std::endl;
        std::cout << "    Batch completed in: " << duration << "ms" << std::endl;
        std::cout << "    Average loss: " << avg_loss << std::endl;
    }
    
    // Test 5: Performance regression check
    std::cout << "\n📋 Test 5: Performance Regression Check" << std::endl;
    {
        TransformerConfig config = createSafeTestConfig();
        TransformerModel model(config);
        
        if (!model.initialize()) {
            std::cerr << "❌ Failed to initialize model for performance test" << std::endl;
            return false;
        }
        
        std::vector<uint32_t> input_tokens = {1, 2, 3, 4, 5, 6, 7, 8};
        std::vector<uint32_t> target_tokens = {2, 3, 4, 5, 6, 7, 8, 9};
        
        auto start_time = std::chrono::high_resolution_clock::now();
        
        float loss = 0.0f;
        bool success = model.trainStep(input_tokens, target_tokens, loss);
        
        auto end_time = std::chrono::high_resolution_clock::now();
        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count();
        
        if (!success) {
            std::cerr << "❌ Performance test training step failed" << std::endl;
            return false;
        }
        
        std::cout << "✅ Performance check passed" << std::endl;
        std::cout << "    Training step completed in: " << duration << "ms" << std::endl;
        
        // Performance should be under 100ms for such a small model
        if (duration > 100) {
            std::cout << "⚠️  Warning: Training step took longer than expected (" << duration << "ms > 100ms)" << std::endl;
        } else {
            std::cout << "🚀 Performance looks good!" << std::endl;
        }
    }
    
    return true;
}

int main() {
    std::cout << "🔬 MSL Transformer Vulnerability Fixes Test Suite" << std::endl;
    std::cout << "==================================================" << std::endl;
    
    if (testVulnerabilityFixes()) {
        std::cout << "\n🎉 ALL VULNERABILITY FIXES VERIFIED SUCCESSFULLY!" << std::endl;
        std::cout << "🛡️  The transformer model is now protected against known vulnerabilities:" << std::endl;
        std::cout << "    ✅ FFN backward threadgroup array overflow (fixed: 1024→2048)" << std::endl;
        std::cout << "    ✅ Layer norm threadgroup bounds checking" << std::endl;
        std::cout << "    ✅ Attention stack buffer overflow (fixed: 512→1024)" << std::endl;
        std::cout << "    ✅ Division by zero protection" << std::endl;
        std::cout << "    ✅ Buffer bounds validation" << std::endl;
        std::cout << "    ✅ Comprehensive diagnostic system" << std::endl;
        std::cout << "\n🚀 Ready for next phase: Advanced Kernel Optimization!" << std::endl;
        return 0;
    } else {
        std::cout << "\n❌ VULNERABILITY FIXES TEST FAILED" << std::endl;
        std::cout << "🚨 DO NOT PROCEED - Critical safety issues remain!" << std::endl;
        return 1;
    }
} 